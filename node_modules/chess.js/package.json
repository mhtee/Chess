{
  "name": "chess.js",
  "version": "0.10.2",
  "description": "A Javascript chess library for chess move generation/validation, piece placement/movement, and check/checkmate/draw detection",
  "author": {
    "name": "Jeff Hlywa",
    "email": "jhlywa@gmail.com",
    "url": "https://github.com/jhlywa"
  },
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/jhlywa/chess.js",
  "keywords": [
    "chess"
  ],
  "main": "chess.js",
  "filename": "chess.min.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/jhlywa/chess.js.git"
  },
  "npmName": "chess.js",
  "npmFileMap": [
    {
      "basePath": "",
      "files": [
        "chess*.js"
      ]
    }
  ],
  "devDependencies": {
    "mocha": "2.2.4",
    "chai": "2.3.0",
    "uglify-js": "2.4.21"
  },
  "scripts": {
    "test": "./node_modules/.bin/mocha",
    "minify": "./node_modules/.bin/uglifyjs chess.js -c -m --comments 'license' > chess.min.js"
  },
  "readme": "# chess.js\n\n[![Build Status](https://travis-ci.org/jhlywa/chess.js.svg?branch=master)](https://travis-ci.org/jhlywa/chess.js)\n\nchess.js is a Javascript chess library that is used for chess move\ngeneration/validation, piece placement/movement, and check/checkmate/stalemate\ndetection - basically everything but the AI.\n\nchess.js has been extensively tested in node.js and most modern browsers.\n\n## Installation\n\nTo install the stable version:\n\n```sh\nnpm install --save chess.js\n```\n\nchess.js is also available via [CDNJS](https://cdnjs.com/libraries/chess.js):\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js\"></script>\n```\n\n## Example Code\nThe code below plays a complete game of chess ... randomly.\n\n```js\nvar Chess = require('./chess').Chess;\nvar chess = new Chess();\n\nwhile (!chess.game_over()) {\n  var moves = chess.moves();\n  var move = moves[Math.floor(Math.random() * moves.length)];\n  chess.move(move);\n}\nconsole.log(chess.pgn());\n```\n\n## Sites Using chess.js\n\n- [The Internet Chess Club (ICC)](http://www.chessclub.com/)\n- [lichess](http://lichess.org/tv)\n- [Redbull - Battle for the Queen](http://battleforthequeen.redbull.com/)\n- [Asm.js Chess Battle](https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/chess/)\n- [3D Hartwig Chess](http://creativejs.com/2012/12/3d-hartwig-chess/)\n- [Scene VR](http://client.scenevr.com/?connect=chess.scenevr.hosting/chess.xml)\n- [Multiplayer Chess](http://chessapp.com/)\n- [Reti Chess](http://retichess.nodejitsu.com/)\n- [Chess Fork](http://www.chessfork.com/)\n- [Lozza](http://op12no2.me/posts/1641)\n- [angular-chess](http://theborakompanioni.github.io/angular-chess)\n\nNeed a user interface?  Try Chris Oakman's excellent\n[chessboard.js](http://chessboardjs.com) library.  See\n[chessboard.js - Random vs Random](http://chessboardjs.com/examples#5002) for\nan example integration of chess.js with chessboard.js.\n\n## API\n\n### Constructor: Chess([ fen ])\nThe Chess() constructor takes a optional parameter which specifies the board configuration\nin [Forsyth-Edwards Notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).\n\n```js\n// board defaults to the starting position when called with no parameters\nvar chess = new Chess();\n\n// pass in a FEN string to load a particular position\nvar chess = new Chess('r1k4r/p2nb1p1/2b4p/1p1n1p2/2PP4/3Q1NB1/1P3PPP/R5K1 b - c3 0 19');\n```\n\n### .ascii()\nReturns a string containing an ASCII diagram of the current position.\n\n```js\nvar chess = new Chess();\n\n// make some moves\nchess.move('e4');\nchess.move('e5');\nchess.move('f4');\n\nchess.ascii();\n// -> '   +------------------------+\n//      8 | r  n  b  q  k  b  n  r |\n//      7 | p  p  p  p  .  p  p  p |\n//      6 | .  .  .  .  .  .  .  . |\n//      5 | .  .  .  .  p  .  .  . |\n//      4 | .  .  .  .  P  P  .  . |\n//      3 | .  .  .  .  .  .  .  . |\n//      2 | P  P  P  P  .  .  P  P |\n//      1 | R  N  B  Q  K  B  N  R |\n//        +------------------------+\n//          a  b  c  d  e  f  g  h'\n```\n\n### .clear()\nClears the board.\n\n```js\nchess.clear();\nchess.fen();\n// -> '8/8/8/8/8/8/8/8 w - - 0 1' <- empty board\n```\n\n### .fen()\nReturns the FEN string for the current position.\n\n```js\nvar chess = new Chess();\n\n// make some moves\nchess.move('e4');\nchess.move('e5');\nchess.move('f4');\n\nchess.fen();\n// -> 'rnbqkbnr/pppp1ppp/8/4p3/4PP2/8/PPPP2PP/RNBQKBNR b KQkq f3 0 2'\n```\n\n### .game_over()\nReturns true if the game has ended via checkmate, stalemate, draw, threefold repetition, or insufficient material. Otherwise, returns false.\n\n```js\nvar chess = new Chess();\nchess.game_over();\n// -> false\n\nchess.load('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78');\nchess.game_over();\n// -> true (stalemate)\n\nchess.load('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\nchess.game_over();\n// -> true (checkmate)\n```\n\n### .get(square)\nReturns the piece on the square:\n\n```js\nchess.clear();\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n\nchess.get('a5');\n// -> { type: 'p', color: 'b' },\nchess.get('a6');\n// -> null\n```\n\n### .history([ options ])\nReturns a list containing the moves of the current game.  Options is an optional\nparameter which may contain a 'verbose' flag.  See .moves() for a description of the\nverbose move fields.\n\n```js\nvar chess = new Chess();\nchess.move('e4');\nchess.move('e5');\nchess.move('f4');\nchess.move('exf4');\n\nchess.history();\n// -> ['e4', 'e5', 'f4', 'exf4']\n\nchess.history({ verbose: true });\n// -> [{ color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' },\n//     { color: 'b', from: 'e7', to: 'e5', flags: 'b', piece: 'p', san: 'e5' },\n//     { color: 'w', from: 'f2', to: 'f4', flags: 'b', piece: 'p', san: 'f4' },\n//     { color: 'b', from: 'e5', to: 'f4', flags: 'c', piece: 'p', captured: 'p', san: 'exf4' }]\n```\n\n### .in_check()\nReturns true or false if the side to move is in check.\n\n```js\nvar chess = new Chess('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\nchess.in_check();\n// -> true\n```\n\n### .in_checkmate()\nReturns true or false if the side to move has been checkmated.\n\n```js\nvar chess = new Chess('rnb1kbnr/pppp1ppp/8/4p3/5PPq/8/PPPPP2P/RNBQKBNR w KQkq - 1 3');\nchess.in_checkmate();\n// -> true\n```\n\n### .in_draw()\nReturns true or false if the game is drawn (50-move rule or insufficient material).\n\n```js\nvar chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78');\nchess.in_draw();\n// -> true\n```\n\n### .in_stalemate()\nReturns true or false if the side to move has been stalemated.\n\n```js\nvar chess = new Chess('4k3/4P3/4K3/8/8/8/8/8 b - - 0 78');\nchess.in_stalemate();\n// -> true\n```\n\n### .in_threefold_repetition()\nReturns true or false if the current board position has occurred three or more\ntimes.\n\n```js\nvar chess = new Chess('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1');\n// -> true\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 1st time\nchess.in_threefold_repetition();\n// -> false\n\nchess.move('Nf3'); chess.move('Nf6'); chess.move('Ng1'); chess.move('Ng8');\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 2nd time\nchess.in_threefold_repetition();\n// -> false\n\nchess.move('Nf3'); chess.move('Nf6'); chess.move('Ng1'); chess.move('Ng8');\n// rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq occurs 3rd time\nchess.in_threefold_repetition();\n// -> true\n```\n\n### .header()\nAllows header information to be added to PGN output. Any number of key/value\npairs can be passed to .header().\n\n```js\nchess.header('White', 'Robert James Fischer');\nchess.header('Black', 'Mikhail Tal');\n\n// or\n\nchess.header('White', 'Morphy', 'Black', 'Anderssen', 'Date', '1858-??-??');\n```\n\nCalling .header() without any arguments returns the header information as an object.\n\n```js\nchess.header();\n// -> { White: 'Morphy', Black: 'Anderssen', Date: '1858-??-??' }\n```\n\n### .insufficient_material()\nReturns true if the game is drawn due to insufficient material (K vs. K,\nK vs. KB, or K vs. KN); otherwise false.\n\n```js\nvar chess = new Chess('k7/8/n7/8/8/8/8/7K b - - 0 1');\nchess.insufficient_material()\n// -> true\n```\n\n### .load(fen)\nThe board is cleared and the FEN string is loaded.  Returns true if position was\nsuccessfully loaded, otherwise false.\n\n```js\nvar chess = new Chess();\nchess.load('4r3/8/2p2PPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45');\n// -> true\n\nchess.load('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45');\n// -> false, bad piece X\n```\n\n### .load_pgn(pgn, [ options ])\nLoad the moves of a game stored in\n[Portable Game Notation](http://en.wikipedia.org/wiki/Portable_Game_Notation).\nOptions is a optional parameter that may contain a `newline_char` which is a\nstring representation of a RegExp (and should not be pre-escaped) and defaults\nto `\\r?\\n`).  Options may also contain a `sloppy` flag which allows chess.js\nto parse moves in various non-standard notations  (see `.move` documentation\nfor more information).  Returns true if the PGN was parsed successfully,\notherwise false.\n\n```js\nvar chess = new Chess();\npgn = ['[Event \"Casual Game\"]',\n       '[Site \"Berlin GER\"]',\n       '[Date \"1852.??.??\"]',\n       '[EventDate \"?\"]',\n       '[Round \"?\"]',\n       '[Result \"1-0\"]',\n       '[White \"Adolf Anderssen\"]',\n       '[Black \"Jean Dufresne\"]',\n       '[ECO \"C52\"]',\n       '[WhiteElo \"?\"]',\n       '[BlackElo \"?\"]',\n       '[PlyCount \"47\"]',\n       '',\n       '1.e4 e5 2.Nf3 Nc6 3.Bc4 Bc5 4.b4 Bxb4 5.c3 Ba5 6.d4 exd4 7.O-O',\n       'd3 8.Qb3 Qf6 9.e5 Qg6 10.Re1 Nge7 11.Ba3 b5 12.Qxb5 Rb8 13.Qa4',\n       'Bb6 14.Nbd2 Bb7 15.Ne4 Qf5 16.Bxd3 Qh5 17.Nf6+ gxf6 18.exf6',\n       'Rg8 19.Rad1 Qxf3 20.Rxe7+ Nxe7 21.Qxd7+ Kxd7 22.Bf5+ Ke8',\n       '23.Bd7+ Kf8 24.Bxe7# 1-0'];\n\nchess.load_pgn(pgn.join('\\n'));\n// -> true\n\nchess.fen()\n// -> 1r3kr1/pbpBBp1p/1b3P2/8/8/2P2q2/P4PPP/3R2K1 b - - 0 24\n\nchess.ascii()\n// -> '  +------------------------+\n//     8 | .  r  .  .  .  k  r  . |\n//     7 | p  b  p  B  B  p  .  p |\n//     6 | .  b  .  .  .  P  .  . |\n//     5 | .  .  .  .  .  .  .  . |\n//     4 | .  .  .  .  .  .  .  . |\n//     3 | .  .  P  .  .  q  .  . |\n//     2 | P  .  .  .  .  P  P  P |\n//     1 | .  .  .  R  .  .  K  . |\n//       +------------------------+\n//         a  b  c  d  e  f  g  h'\n```\n\n### .move(move, [ options ])\nAttempts to make a move on the board, returning a move object if the move was\nlegal, otherwise null.  The .move function can be called two ways, by passing\na string in Standard Algebraic Notation (SAN):\n\n```js\nvar chess = new Chess();\n\nchess.move('e4')\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\n\nchess.move('nf6') // SAN is case sensitive!!\n// -> null\n\nchess.move('Nf6')\n// -> { color: 'b', from: 'g8', to: 'f6', flags: 'n', piece: 'n', san: 'Nf6' }\n```\n\nOr by passing .move() a move object (only the 'to', 'from', and when necessary\n'promotion', fields are needed):\n\n```js\nvar chess = new Chess();\n\nchess.move({ from: 'g2', to: 'g3' });\n// -> { color: 'w', from: 'g2', to: 'g3', flags: 'n', piece: 'p', san: 'g3' }\n```\n\nAn optional sloppy flag can be used to parse a variety of non-standard move\nnotations:\n\n```js\n\nvar chess = new Chess();\n\n// various forms of Long Algebraic Notation\nchess.move('e2e4', {sloppy: true});\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\nchess.move('e7-e5', {sloppy: true});\n// -> { color: 'b', from: 'e7', to: 'e5', flags: 'b', piece: 'p', san: 'e5' }\nchess.move('Pf2f4', {sloppy: true});\n// -> { color: 'w', from: 'f2', to: 'f4', flags: 'b', piece: 'p', san: 'f4' }\nchess.move('Pe5xf4', {sloppy: true});\n// -> { color: 'b', from: 'e5', to: 'f4', flags: 'c', piece: 'p', captured: 'p', san: 'exf4' }\n\n\n// correctly parses incorrectly disambiguated moves\nchess = new Chess('r2qkbnr/ppp2ppp/2n5/1B2pQ2/4P3/8/PPP2PPP/RNB1K2R b KQkq - 3 7');\n\nchess.move('Nge7');  // Ne7 is unambiguous because the knight on c6 is pinned\n// -> null\n\nchess.move('Nge7', {sloppy: true});\n// -> { color: 'b', from: 'g8', to: 'e7', flags: 'n', piece: 'n', san: 'Ne7' }\n```\n### .moves([ options ])\nReturns a list of legals moves from the current position.  The function takes an optional parameter which controls the single-square move generation and verbosity.\n\n```js\nvar chess = new Chess();\nchess.moves();\n// -> ['a3', 'a4', 'b3', 'b4', 'c3', 'c4', 'd3', 'd4', 'e3', 'e4',\n//     'f3', 'f4', 'g3', 'g4', 'h3', 'h4', 'Na3', 'Nc3', 'Nf3', 'Nh3']\n\nchess.moves({square: 'e2'});\n// -> ['e3', 'e4']\n\nchess.moves({square: 'e9'}); // invalid square\n// -> []\n\nchess.moves({ verbose: true });\n// -> [{ color: 'w', from: 'a2', to: 'a3',\n//       flags: 'n', piece: 'p', san 'a3'\n//       # a captured: key is included when the move is a capture\n//       # a promotion: key is included when the move is a promotion\n//     },\n//     ...\n//     ]\n```\n\nThe _piece_, _captured_, and _promotion_ fields contain the lowercase\nrepresentation of the applicable piece.\n\nThe _flags_ field in verbose mode may contain one or more of the following values:\n\n- 'n' - a non-capture\n- 'b' - a pawn push of two squares\n- 'e' - an en passant capture\n- 'c' - a standard capture\n- 'p' - a promotion\n- 'k' - kingside castling\n- 'q' - queenside castling\n\nA flag of 'pc' would mean that a pawn captured a piece on the 8th rank and promoted.\n\n### .pgn([ options ])\nReturns the game in PGN format. Options is an optional parameter which may include\nmax width and/or a newline character settings.\n\n```js\nvar chess = new Chess();\nchess.header('White', 'Plunky', 'Black', 'Plinkie');\nchess.move('e4');\nchess.move('e5');\nchess.move('Nc3');\nchess.move('Nc6');\n\nchess.pgn({ max_width: 5, newline_char: '<br />' });\n// -> '[White \"Plunky\"]<br />[Black \"Plinkie\"]<br /><br />1. e4 e5<br />2. Nc3 Nc6'\n```\n\n### .put(piece, square)\nPlace a piece on square where piece is an object with the form\n{ type: ..., color: ... }.  Returns true if piece was successfully placed,\notherwise the board remains unchanged and false is returned.  `put()` will fail\nwhen passed an invalid piece or square, or when two or more kings of the\nsame color are placed.\n\n```js\nchess.clear();\n\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\n// -> true\nchess.put({ type: 'k', color: 'w' }, 'h1') // shorthand\n// -> true\n\nchess.fen();\n// -> '8/8/8/p7/8/8/8/7K w - - 0 0'\n\nchess.put({ type: 'z', color: 'w' }, 'a1') // invalid piece\n// -> false\n\nchess.clear();\n\nchess.put({ type: 'k', color: 'w' }, 'a1')\n// -> true\n\nchess.put({ type: 'k', color: 'w' }, 'h1') // fail - two kings\n// -> false\n\n```\n\n### .remove(square)\nRemove and return the piece on _square_.\n\n```js\nchess.clear();\nchess.put({ type: chess.PAWN, color: chess.BLACK }, 'a5') // put a black pawn on a5\nchess.put({ type: chess.KING, color: chess.WHITE }, 'h1') // put a white king on h1\n\nchess.remove('a5');\n// -> { type: 'p', color: 'b' },\nchess.remove('h1');\n// -> { type: 'k', color: 'w' },\nchess.remove('e1');\n// -> null\n```\n\n### .reset()\nReset the board to the initial starting position.\n\n### .square_color(square)\nReturns the color of the square ('light' or 'dark').\n\n```js\nvar chess = Chess();\nchess.square_color('h1')\n// -> 'light'\nchess.square_color('a7')\n// -> 'dark'\nchess.square_color('bogus square')\n// -> null\n```\n\n### .turn()\nReturns the current side to move.\n\n```js\nchess.load('rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1')\nchess.turn()\n// -> 'b'\n```\n\n### .undo()\nTakeback the last half-move, returning a move object if successful, otherwise null.\n\n```js\nvar chess = new Chess();\n\nchess.fen();\n// -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nchess.move('e4');\nchess.fen();\n// -> 'rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1'\n\nchess.undo();\n// -> { color: 'w', from: 'e2', to: 'e4', flags: 'b', piece: 'p', san: 'e4' }\nchess.fen();\n// -> 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\nchess.undo();\n// -> null\n```\n\n### .validate_fen(fen):\nReturns a validation object specifying validity or the errors found within the\nFEN string.\n\n```js\nchess.validate_fen('2n1r3/p1k2pp1/B1p3b1/P7/5bP1/2N1B3/1P2KP2/2R5 b - - 4 25');\n// -> { valid: true, error_number: 0, error: 'No errors.' }\n\nchess.validate_fen('4r3/8/X12XPk/1p6/pP2p1R1/P1B5/2P2K2/3r4 w - - 1 45');\n// -> { valid: false, error_number: 9,\n//     error: '1st field (piece positions) is invalid [invalid piece].' }\n```\n\n## MUSIC\n\nMusical support provided by:\n\n- [The Grateful Dead](https://www.youtube.com/watch?feature=player_detailpage&v=ANF6qanEB7s#t=2999)\n- [Umphrey's McGee](http://www.youtube.com/watch?v=jh-1fFWkSdw)\n\n## BUGS\n\n- The en passant square and castling flags aren't adjusted when using the put/remove functions (workaround: use .load() instead)\n\n## TODO\n\n- Investigate the use of piece lists (this may shave a few cycles off\n  generate_moves() and attacked()).\n- Refactor API to use camelCase - yuck.\n- Add more robust FEN validation.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jhlywa/chess.js/issues"
  },
  "_id": "chess.js@0.10.2",
  "dist": {
    "shasum": "6b090362396261e0aa1e5b7ddf7ffe7cb8cfe3e4"
  },
  "_from": "chess.js@",
  "_resolved": "https://registry.npmjs.org/chess.js/-/chess.js-0.10.2.tgz"
}
